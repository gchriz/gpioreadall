#!/usr/bin/env python3
""" Simple clone of wiringPi's 'gpio readall'.
    Since wiringPi is no longer developed (see http://wiringpi.com/news)
    and is not contained in Raspberry Pi OS version Bullseye any more
    the command 'gpio' is gone.  And so the really helpfull 'gpio readall' too.
    This simple Python script here aims to give a similar output.

    It has been tested with a Raspberry Pi version 2B and a Pi400.
    No warranties at all - as usual. """

import pigpio


def readable_mode(m):
    """ convert pigpio's numerical mode to a readable one """

    return ["in", "out", "ALT5", "ALT4", "ALT0", "ALT1", "ALT2", "ALT3"][m]


def get_gpio_infos():
    """ return a list of infos about the pins from given layout """

    layout = [
               # BCM GPIO , Name
               [None, "3.3V" ],  [None, "5V"   ],
               [   2, "SDA.1"],  [None, "5V"   ],
               [   3, "SCL.1"],  [None, "GND"  ],
               [   4, ""     ],  [  14, "TxD"  ],
               [None, "GND"  ],  [  15, "RxD"  ],
               [  17, ""     ],  [  18, ""     ],
               [  27, ""     ],  [None, "GND"  ],
               [  22, ""     ],  [  23, ""     ],
               [None, "3.3V" ],  [  24, ""     ],
               [  10, "MOSI" ],  [None, "GND"  ],
               [   9, "MISO" ],  [  25, ""     ],
               [  11, "SCLK" ],  [   8, "CE0"  ],
               [None, "GND"  ],  [   7, "CE1"  ],
               [   0, "SDA.0"],  [   1, "SCL.0"],
               [   5, ""     ],  [None, "GND"  ],
               [   6, ""     ],  [  12, ""     ],
               [  13, ""     ],  [None, "GND"  ],
               [  19, ""     ],  [  16, ""     ],
               [  26, ""     ],  [  20, ""     ],
               [None, "GND"  ],  [  21, ""     ],
             ]

    pi = pigpio.pi()  # local pi
    gpio_infos = []

    for pins in layout:
        if pins[0] == None:  # if it is no GPIO# according to layout above
            gpio_infos.append(dict(nr="", mode="", state="", name=pins[1]))
        else:
            gpio_infos.append(dict(nr = pins[0],
                                   mode = readable_mode(pi.get_mode(pins[0])),
                                   state = pi.read(pins[0]),
                                   name = pins[1]))
    return gpio_infos


def print_layout(gpio_infos):

    print("state mode BCM  name   Physical name   BCM mode state")
    print("-----------------------------------------------------")

    for i, this_gpio in enumerate(gpio_infos):

        if i % 2 == 0:
            out = f" {this_gpio['state']:2}  {this_gpio['mode']:>4}  {this_gpio['nr']:2}   {this_gpio['name']:>5}  {i+1:2}"
        else:
            print(f"{out} | {i+1:2}  {this_gpio['name']:5}   {this_gpio['nr']:2}  {this_gpio['mode']:4}  {this_gpio['state']:2} ")


if __name__ == "__main__":

    print_layout(get_gpio_infos())
